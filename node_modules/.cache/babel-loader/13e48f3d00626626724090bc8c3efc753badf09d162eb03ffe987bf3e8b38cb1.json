{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\daleh\\\\Documents\\\\GitHub\\\\Web Dev\\\\react-admin\\\\src\\\\components\\\\GeographyChart.jsx\",\n  _s = $RefreshSig$();\nimport { ResponsiveChoropleth } from \"@nivo/geo\";\nimport { useTheme } from \"@mui/material\";\nimport { tokens } from \"../theme\";\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\nimport { mockGeographyData as data } from \"../data/mockData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeographyChart = _ref => {\n  _s();\n  let {\n    isDashboard = false\n  } = _ref;\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  return /*#__PURE__*/_jsxDEV(ResponsiveChoropleth, {\n    data: data,\n    theme: {\n      axis: {\n        domain: {\n          line: {\n            stroke: colors.grey[100]\n          }\n        },\n        legend: {\n          text: {\n            fill: colors.grey[100]\n          }\n        },\n        ticks: {\n          line: {\n            stroke: colors.grey[100],\n            strokeWidth: 1\n          },\n          text: {\n            fill: colors.grey[100]\n          }\n        }\n      },\n      legends: {\n        text: {\n          fill: colors.grey[100]\n        }\n      }\n    },\n    features: geoFeatures.features,\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    domain: [0, 1000000],\n    unknownColor: \"#666666\",\n    label: \"properties.name\",\n    valueFormat: \".2s\",\n    projectionScale: isDashboard ? 40 : 150,\n    projectionTranslation: isDashboard ? [0.49, 0.6] : [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n    borderWidth: 1.5,\n    borderColor: \"#ffffff\",\n    legends: !isDashboard ? [{\n      anchor: 'bottom-left',\n      direction: 'column',\n      justify: true,\n      translateX: 20,\n      translateY: -100,\n      itemsSpacing: 0,\n      itemWidth: 94,\n      itemHeight: 18,\n      itemDirection: 'left-to-right',\n      itemTextColor: colors.grey[100],\n      itemOpacity: 0.85,\n      symbolSize: 18,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemTextColor: \"#ffffff\",\n          itemOpacity: 1\n        }\n      }]\n    }] : undefined\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n_s(GeographyChart, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = GeographyChart;\nexport default GeographyChart;\nvar _c;\n$RefreshReg$(_c, \"GeographyChart\");","map":{"version":3,"names":["ResponsiveChoropleth","useTheme","tokens","geoFeatures","mockGeographyData","data","GeographyChart","isDashboard","theme","colors","palette","mode","axis","domain","line","stroke","grey","legend","text","fill","ticks","strokeWidth","legends","features","top","right","bottom","left","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemTextColor","itemOpacity","symbolSize","effects","on","style","undefined"],"sources":["C:/Users/daleh/Documents/GitHub/Web Dev/react-admin/src/components/GeographyChart.jsx"],"sourcesContent":["import { ResponsiveChoropleth } from \"@nivo/geo\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { tokens } from \"../theme\";\r\nimport { geoFeatures } from \"../data/mockGeoFeatures\";\r\nimport { mockGeographyData as data } from \"../data/mockData\";\r\n\r\nconst GeographyChart = ({ isDashboard = false }) => {\r\n    const theme = useTheme();\r\n    const colors = tokens(theme.palette.mode);\r\n\r\n    return (\r\n        <ResponsiveChoropleth\r\n        data={data}\r\n        theme={{\r\n            axis: {\r\n                domain: {\r\n                    line: {\r\n                        stroke: colors.grey[100],\r\n                    },\r\n                },\r\n                legend: {\r\n                    text: {\r\n                        fill: colors.grey[100],\r\n                    },\r\n                },\r\n                ticks: {\r\n                    line: {\r\n                        stroke: colors.grey[100],\r\n                        strokeWidth: 1\r\n                    },\r\n                    text: {\r\n                        fill: colors.grey[100],\r\n                    }\r\n                }\r\n            },\r\n            legends: {\r\n                text: {\r\n                    fill: colors.grey[100],\r\n                }\r\n            }\r\n        }}\r\n        features={geoFeatures.features}\r\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n        domain={[ 0, 1000000 ]}\r\n        unknownColor=\"#666666\"\r\n        label=\"properties.name\"\r\n        valueFormat=\".2s\"\r\n        projectionScale={isDashboard ? 40 : 150}\r\n        projectionTranslation={isDashboard ? [0.49, 0.6] : [ 0.5, 0.5 ]}\r\n        projectionRotation={[ 0, 0, 0 ]}\r\n        borderWidth={1.5}\r\n        borderColor=\"#ffffff\"\r\n        legends={\r\n            !isDashboard ? [{\r\n                anchor: 'bottom-left',\r\n                direction: 'column',\r\n                justify: true,\r\n                translateX: 20,\r\n                translateY: -100,\r\n                itemsSpacing: 0,\r\n                itemWidth: 94,\r\n                itemHeight: 18,\r\n                itemDirection: 'left-to-right',\r\n                itemTextColor: colors.grey[100],\r\n                itemOpacity: 0.85,\r\n                symbolSize: 18,\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemTextColor: \"#ffffff\",\r\n                            itemOpacity: 1\r\n                        },\r\n                    },\r\n                ],\r\n            },] : undefined\r\n        }\r\n    />\r\n    );\r\n};\r\n\r\nexport default GeographyChart;"],"mappings":";;AAAA,SAASA,oBAAoB,QAAQ,WAAW;AAChD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,iBAAiB,IAAIC,IAAI,QAAQ,kBAAkB;AAAC;AAE7D,MAAMC,cAAc,GAAG,QAA6B;EAAA;EAAA,IAA5B;IAAEC,WAAW,GAAG;EAAM,CAAC;EAC3C,MAAMC,KAAK,GAAGP,QAAQ,EAAE;EACxB,MAAMQ,MAAM,GAAGP,MAAM,CAACM,KAAK,CAACE,OAAO,CAACC,IAAI,CAAC;EAEzC,oBACI,QAAC,oBAAoB;IACrB,IAAI,EAAEN,IAAK;IACX,KAAK,EAAE;MACHO,IAAI,EAAE;QACFC,MAAM,EAAE;UACJC,IAAI,EAAE;YACFC,MAAM,EAAEN,MAAM,CAACO,IAAI,CAAC,GAAG;UAC3B;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,IAAI,EAAE;YACFC,IAAI,EAAEV,MAAM,CAACO,IAAI,CAAC,GAAG;UACzB;QACJ,CAAC;QACDI,KAAK,EAAE;UACHN,IAAI,EAAE;YACFC,MAAM,EAAEN,MAAM,CAACO,IAAI,CAAC,GAAG,CAAC;YACxBK,WAAW,EAAE;UACjB,CAAC;UACDH,IAAI,EAAE;YACFC,IAAI,EAAEV,MAAM,CAACO,IAAI,CAAC,GAAG;UACzB;QACJ;MACJ,CAAC;MACDM,OAAO,EAAE;QACLJ,IAAI,EAAE;UACFC,IAAI,EAAEV,MAAM,CAACO,IAAI,CAAC,GAAG;QACzB;MACJ;IACJ,CAAE;IACF,QAAQ,EAAEb,WAAW,CAACoB,QAAS;IAC/B,MAAM,EAAE;MAAEC,GAAG,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAE;IACjD,MAAM,EAAE,CAAE,CAAC,EAAE,OAAO,CAAG;IACvB,YAAY,EAAC,SAAS;IACtB,KAAK,EAAC,iBAAiB;IACvB,WAAW,EAAC,KAAK;IACjB,eAAe,EAAEpB,WAAW,GAAG,EAAE,GAAG,GAAI;IACxC,qBAAqB,EAAEA,WAAW,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAE,GAAG,EAAE,GAAG,CAAG;IAChE,kBAAkB,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAG;IAChC,WAAW,EAAE,GAAI;IACjB,WAAW,EAAC,SAAS;IACrB,OAAO,EACH,CAACA,WAAW,GAAG,CAAC;MACZqB,MAAM,EAAE,aAAa;MACrBC,SAAS,EAAE,QAAQ;MACnBC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,CAAC,GAAG;MAChBC,YAAY,EAAE,CAAC;MACfC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,EAAE;MACdC,aAAa,EAAE,eAAe;MAC9BC,aAAa,EAAE5B,MAAM,CAACO,IAAI,CAAC,GAAG,CAAC;MAC/BsB,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE,CACL;QACIC,EAAE,EAAE,OAAO;QACXC,KAAK,EAAE;UACHL,aAAa,EAAE,SAAS;UACxBC,WAAW,EAAE;QACjB;MACJ,CAAC;IAET,CAAC,CAAE,GAAGK;EACT;IAAA;IAAA;IAAA;EAAA,QACH;AAEN,CAAC;AAAC,GAzEIrC,cAAc;EAAA,QACFL,QAAQ;AAAA;AAAA,KADpBK,cAAc;AA2EpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}